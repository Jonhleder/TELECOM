# -*- coding: utf-8 -*-
"""TelecomX_LATAM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17DjJfRMcVHYyqz4RYsPRUgpGGttDkQBC

#üìå Extracci√≥n
"""

import pandas as pd
import numpy as np
import json

url= '/content/drive/MyDrive/ALURA/ETL/TELECOM X: Proyecto/TelecomX_Data.json'

df = pd.read_json(url)

"""#üîß Transformaci√≥n"""

df = pd.DataFrame(df)

"""Normalizamos las columnas con diccionarios"""

cols_dict = ['customer', 'phone', 'internet', 'account']

df_customer = pd.json_normalize(df['customer'])
df_phone = pd.json_normalize(df['phone'])
df_internet = pd.json_normalize(df['internet'])
df_account = pd.json_normalize(df['account'])

df_simple = df.drop(columns=cols_dict)

df = pd.concat([df_simple, df_customer, df_phone, df_internet, df_account], axis=1)

df

"""## **Conoce el conjunto de datos**

¬øQu√© debes hacer?

‚úÖ Explorar las columnas del dataset y verificar sus tipos de datos.

‚úÖ Consultar el diccionario para comprender mejor el significado de las variables.

‚úÖ Identificar las columnas m√°s relevantes para el an√°lisis de evasi√≥n.

Explorar las columnas del dataset y verificar sus tipos de datos.
"""

df.dtypes

df.info()

"""Identificar las columnas m√°s relevantes para el an√°lisis de evasi√≥n."""

df.columns

"""## **Comprobaci√≥n de incoherencias en los datos**

En este paso, verifica si hay problemas en los datos que puedan afectar el an√°lisis. Presta atenci√≥n a valores ausentes, duplicados, errores de formato e inconsistencias en las categor√≠as. Este proceso es esencial para asegurarte de que los datos est√©n listos para las siguientes etapas.
"""

print(df.count())

print(df.isnull().sum())

df[df.isnull().any(axis=1)]

df["Charges.Total"] = df["Charges.Total"].fillna(df["Charges.Total"].mean())  # o .median()
df["Cuentas_Diarias"] = df["Cuentas_Diarias"].fillna(df["Cuentas_Diarias"].mean())  # o .median()

df[df.isnull().any(axis=1)]

df = df.dropna(subset=["Churn"])

print(df.isnull().sum())

df.dtypes

df.to_csv('datos_transformados.csv', index=False)

df = df[df["Churn"].isin(["Yes", "No"])]

"""**CAMBIOS A REALIZAR PARA COHERENCIA DE LOS DATOS**

Charges.Total	object float64
"""

df["Churn"].unique()

df["Contract"] = df["Contract"].str.replace("-", " ", regex=False)

df

df["Charges.Total"] = pd.to_numeric(df["Charges.Total"], errors='coerce')

df.dtypes

"""Columna de cuentas Diarias"""

df["Cuentas_Diarias"] = df["Charges.Total"] / 30

print(df[["Charges.Total", "Cuentas_Diarias"]])

"""#üìä Carga y an√°lisis"""

df.describe()

import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")

def generar_grafico(palette):
  plt.figure(figsize=(6,4))
  sns.countplot(data=df, x="Churn", palette=palette)
  plt.title("Distribuci√≥n de Evasi√≥n (Churn)")
  plt.xlabel("¬øCliente se dio de baja?")
  plt.ylabel("Cantidad de clientes")
  plt.show()

generar_grafico("rocket")

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(5,8))
sns.countplot(data=df, x="gender", hue="Churn", palette="rocket")
plt.title("Churn por G√©nero")
plt.xlabel("G√©nero")
plt.ylabel("N√∫mero de clientes")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

numericas = ["tenure", "Charges.Monthly", "Charges.Total"]  # agrega m√°s si tienes

for col in numericas:
    plt.figure(figsize=(8,4))
    sns.histplot(data=df, x=col, hue="Churn", kde=True, palette=["purple", "orange"], element="step")
    plt.title(f"Distribuci√≥n de {col} seg√∫n churn")
    plt.xlabel(col)
    plt.ylabel("N√∫mero de clientes")
    plt.show()